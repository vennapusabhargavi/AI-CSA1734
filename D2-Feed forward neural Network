import numpy as np

class NeuralNetwork:
    def __init__(self, input_size, hidden_size, output_size):
        self.input_size = input_size
        self.hidden_size = hidden_size
        self.output_size = output_size
        
        # Initialize weights and biases randomly
        self.weights_input_hidden = np.random.randn(self.input_size, self.hidden_size)
        self.bias_hidden = np.zeros((1, self.hidden_size))
        
        self.weights_hidden_output = np.random.randn(self.hidden_size, self.output_size)
        self.bias_output = np.zeros((1, self.output_size))
        
    def sigmoid(self, x):
        return 1 / (1 + np.exp(-x))
    
    def feedforward(self, X):
        # Compute input to hidden layer
        hidden_input = np.dot(X, self.weights_input_hidden) + self.bias_hidden
        hidden_output = self.sigmoid(hidden_input)
        
        # Compute hidden to output layer
        output_input = np.dot(hidden_output, self.weights_hidden_output) + self.bias_output
        predicted_output = self.sigmoid(output_input)
        
        return predicted_output

# Example usage:
if __name__ == '__main__':
    # Define the neural network architecture
    input_size = 2
    hidden_size = 3
    output_size = 1

    # Create an instance of the neural network
    nn = NeuralNetwork(input_size, hidden_size, output_size)

    # Example input data (batch_size = 1)
    X = np.array([[0.8, 0.2]])

    # Perform feedforward propagation to get predictions
    predicted_output = nn.feedforward(X)

    print("Input:", X)
    print("Predicted Output:", predicted_output)
